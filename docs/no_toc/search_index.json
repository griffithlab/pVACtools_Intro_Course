[["index.html", "Introduction to pVACtools About this Course", " Introduction to pVACtools July, 2023 About this Course This course is part of a series of courses for the Informatics Technology for Cancer Research (ITCR) called the Informatics Technology for Cancer Research Education Resource. This material was created by the ITCR funded pVACtools resource. This initiative is funded by the following grant: National Cancer Institute (NCI) U01CA248235. "],["introduction.html", "Chapter 1 Introduction 1.1 Motivation 1.2 Background 1.3 Target Audience 1.4 Curriculum", " Chapter 1 Introduction This course has been developed recently (Summer 2023). We welcome any feedback at help@pvactools.org or by submission of GitHub issues. 1.1 Motivation Identification of neoantigens is a critical step in predicting response to checkpoint blockade therapy and design of personalized cancer vaccines. This is a cross-disciplinary challenge, which involves genomics, proteomics, immunology, and computational approaches. We have built a computational framework called pVACtools that, when paired with a well-established genomics pipeline, produces an end-to-end solution for neoantigen characterization. pVACtools supports identification of altered peptides from different mechanisms, including point mutations, in-frame and frameshift insertions and deletions, and gene fusions. Prediction of peptide:MHC binding is accomplished by supporting an ensemble of MHC Class I and II binding algorithms within a framework designed to facilitate the incorporation of additional algorithms. Prioritization of predicted peptides occurs by integrating diverse data, including mutant allele expression, peptide binding affinities, and determination of whether a mutation is clonal or subclonal. Interactive visualization via a Web interface allows users to efficiently generate, review, and interpret results, selecting candidate peptides for individual experiments or patient vaccine designs. Additional modules support design choices needed for competing vaccine delivery approaches. One such module optimizes peptide ordering to minimize junctional epitopes in DNA vector vaccines. Downstream analysis commands for synthetic long peptide vaccines are available to assess candidates for factors that influence peptide synthesis. All of the aforementioned steps are executed via a modular workflow consisting of tools for neoantigen prediction from somatic alterations (pVACseq, pVACfuse, and pVACbind), prioritization, and selection using a graphical Web-based interface (pVACview), and design of DNA vector–based vaccines (pVACvector) and synthetic long peptide vaccines. pVACtools is available at http://www.pvactools.org. 1.2 Background Neoantigens are unique peptide sequences generated from mutations acquired somatically in tumor cells. These antigens provide an avenue for tumor-specific immune cell recognition and have been found to be important targets for cancer immunotherapies (Keskin et al. 2018; Ott et al. 2017; Hilf et al. 2018). Effective neoantigens, presented by the major histocompatibility complex (MHC) and thus introduced to the patient’s immune system, can prime and activate CD8+ and CD4+ T cells for downstream signaling of cell-death. Patients with high tumor mutation burden tend to have stronger responses to neoantigen based immunotherapy treatments (Brown et al. 2014; Rizvi et al. 2015; Schumacher and Schreiber 2015). DNA and RNA sequencing technologies allow researchers and clinicians to computationally predict potential neoantigens based on tumor-specific mutations. However, neoantigen generation and presentation is complex, and a host of factors must be evaluated by complex analyses to characterize each potential neoantigen. These include but are not limited to: somatic variant identification, tumor clonality assessment, RNA expression estimation, mRNA isoform selection, inference of translated tumor specific peptides that arise from the somatic variant, and prediction of peptide processing, peptide transportation, peptide-MHC binding, peptide-MHC stability and recognition by cytotoxic T cells (Richters et al. 2019). pVACtools can be used as the final step in a well-established variant calling pipeline. It leverages existing tools with functionality related to variant annotation (Ensembl VEP (McLaren et al. 2016)), identifying neoantigens from specific sources (e.g. fusions via star-fusion (Haas et al. 2019), AGFusion (Murphy and Elemento 2016), and Arriba (Uhrig et al. 2021)), HLA typing (OptiType (Szolek et al. 2014), PHLAT (Bai, Wang, and Fury 2018)), peptide-MHC binding prediction (IEDB (Vita et al. 2018), NetMHCpan (Jurtz et al. 2017), MHCflurry (ODonnell et al. 2018), MHCnuggets (Shao et al. 2020)), peptide-MHC stability (NetMHCstabpan (Rasmussen et al. 2016)], peptide processing (NetChop (Nielsen et al. 2005)), manufacturability metrics (vaxrank (Rubinsteyn et al. 2017)), and reference proteome similarity (BLAST (Altschul et al. 1990)). Each of these tools tackles specific tasks within the broader goal of antigen analysis and is utilized by pVACtools to provide an end-to-end integration of novel algorithms and established tools needed to discover, characterize, prioritize, and utilize tumor-specific neoantigens in basic research and clinical applications. Combining pVACtools with existing variant calling pipelines provides an end-to-end solution for neoantigen prediction and characterization. 1.3 Target Audience The course is intended for anyone seeking a better understanding of current best practices in neoantigen identification and prioritization using pVACtools. It assumes that the learner is familiar with basic biology, genetics and immunology concepts. 1.4 Curriculum This course will teach learners to: Understand key concepts of immunogenomics and neoantigen identification How to run the pVACtools software suite How to visualize and prioritize neoantigen candidates with pVACview For more background on pVACtools please consult the core pVAC papers (Hundal et al. 2016, 2018, 2020). References "],["prerequisites.html", "Chapter 2 Prerequisites 2.1 Learning Objectives 2.2 Docker 2.3 Terminal 2.4 R Studio and R package dependencies 2.5 Data", " Chapter 2 Prerequisites 2.1 Learning Objectives This chapter will cover the prerequisites for this course, including: Installing Docker Installing R Studio Downloading data files 2.2 Docker For the purpose of this course, we will be using Docker to run pVACseq and pVACfuse. Docker is a tool that is used to automate the deployment of applications in lightweight containers so that applications can work efficiently in different environments in isolation. We provide versioned Docker containers for all pVACtools releases via Docker Hub using the griffithlab/pvactools image name. In order to use Docker, you will to download the Docker Desktop software. Please ensure you select the correct install package for your operating system. 2.3 Terminal We will be running Docker from the command line on your preferred terminal using the Docker command line interface (CLI). The Docker CLI is already included with Docker Desktop. Most operating systems already come with a Terminal application. If yours doesn’t, you will need to first install one. 2.4 R Studio and R package dependencies In order to use pVACview, you will need to download R. Please refer here for downloading R (version 3.5 and above required). You may also take the additional step of downloading R studio if you are not familiar with launching R Shiny from the command line. Additionally, there are a number of packages you will need to install in your R/R studio: install.packages(&quot;shiny&quot;, dependencies=TRUE) install.packages(&quot;ggplot2&quot;, dependencies=TRUE) install.packages(&quot;DT&quot;, dependencies=TRUE) install.packages(&quot;reshape2&quot;, dependencies=TRUE) install.packages(&quot;jsonlite&quot;, dependencies=TRUE) install.packages(&quot;tibble&quot;, dependencies=TRUE) install.packages(&quot;tidyr&quot;, dependencies=TRUE) install.packages(&quot;plyr&quot;, dependencies=TRUE) install.packages(&quot;dplyr&quot;, dependencies=TRUE) install.packages(&quot;shinydashboard&quot;, dependencies=TRUE) install.packages(&quot;shinydashboardPlus&quot;, dependencies=TRUE) install.packages(&quot;fresh&quot;, dependencies=TRUE) install.packages(&quot;shinycssloaders&quot;, dependencies=TRUE) install.packages(&quot;RCurl&quot;, dependencies=TRUE) install.packages(&quot;curl&quot;, dependencies=TRUE) install.packages(&quot;string&quot;, dependencies=TRUE) install.packages(&quot;shinycssloaders&quot;, dependencies=TRUE) 2.5 Data For this course, we have put together a set of input data generated from the breast cancer cell line HCC1395 and a matched normal lymphoblastoid cell line HCC1395BL. Data from this cell line is commonly used as test data in bioinformatics applications. For more information on these lines and the generation of test data, please refer to the data section of our precision medicine bioinformatics course. The input data consists of the following files: For pVACseq: annotated.expression.vcf.gz: A somatic (tumor-normal) VCF and its tbi index file. The VCF has been annotated with VEP and has coverage and expression information added. It has also been annotated with custom VEP plugins that provide wild type and mutant versions of the full length protein sequences predicted to arise from each transcript annotated with each variant. phased.vcf.gz: A phased tumor-germline VCF and its tbi index file to provide information about in-phase proximal variants that might alter the predicted peptide sequence around a somatic mutation of interest. optitype_normal_result.tsv: A OptiType file with HLA allele typing predictions. For more detailed information on how the variant input file is created, please refer to the input file preparation section of the pVACtools docs. For pVACfuse: agfusion_results: An AGFusion output directory with annotated fusion calls. star-fusion.fusion_predictions.tsv: A STARFusion prediction file with fusion read support and expression information. General: Homo_sapiens.GRCh38.pep.all.fa.gz: A reference proteome peptide FASTA to use for determining whether there are any reference matches of neoantigen candidates. To download this data, please run the following commands: wget https://raw.githubusercontent.com/griffithlab/pVACtools_Intro_Course/main/HCC1395_inputs.zip unzip HCC1395_inputs.zip This course will not cover the required pre-processing steps for the pVACtools input data but extensive instructions on how to prepare your own data for use with pVACtools can be found at pvactools.org. "],["running-pvactools.html", "Chapter 3 Running pVACtools 3.1 Learning Objectives 3.2 Starting Docker 3.3 Running pVACseq 3.4 Running pVACfuse", " Chapter 3 Running pVACtools 3.1 Learning Objectives This chapter will cover: Starting an interactive Docker session Running pVACseq Running pVACfuse 3.2 Starting Docker In your Terminal execute the following command: mkdir pVACtools_outputs docker run \\ -v ${PWD}/HCC1395_inputs:/HCC1395_inputs \\ -v ${PWD}/pVACtools_outputs:/pVACtools_outputs \\ -it griffithlab/pvactools:4.0.0 \\ /bin/bash This will pull the 4.0.0 version of the griffithlab/pvactools Docker image and start an interactive session (-it) of that Docker image using the bash shell (/bin/bash). The -v ${PWD}/HCC1395_inputs:/HCC1395_inputs part of the command will mount the HCC1395_inputs folder at /HCC1395_inputs inside of the Docker container so that you will have access to the input data from inside the Docker container. The -v ${PWD}/pVACtools_outputs:/pVACtools_outputs part of the command will mount the pVACtools_outputs folder you just created. We will write the outputs from pVACseq and pVACfuse to that folder so that you will have access to it once you exit the Docker image. 3.3 Running pVACseq pVACseq is used to identify neoantigens from missense, inframe indel, and frameshift mutations. The pipeline uses a somatic VCF file as an input, which represents variants identified in the tumor sample. The VEP annotations in the VCF file provide the variant type of a variant and their consequence on individual gene transcripts overlapping the genomic coordinates of the variant. The predicted amino acid change of the variant for a particular transcript is used by pVACseq to calculate the mutated peptide sequence. The pVACseq pipeline is run using the pvacseq run command. 3.3.1 Required Parameters for pVACseq The pvacseq run command takes a number of required parameters in the following order: vcf_file: A VEP-annotated single- or multi-sample VCF containing genotype, transcript, Wildtype protein sequence, and Frameshift protein sequence information. sample_name: The name of the tumor sample being processed. When processing a multi-sample VCF the sample name must be a sample ID in the input VCF #CHROM header line. Only variants that are called (with a genotype/GT of 0/1 or 1/1) in that sample will be processed. allele(s): The name of the HLA allele(s) to use for epitope prediction. Multiple alleles can be specified using a comma-separated list. These should be the HLA alleles of your patient/sample. You might have clinical typing information for your patient. If not, you will need to computationally predict the patient’s HLA type using software such as OptiType. The the HLA allele names should be in the following format: HLA-A*02:01. prediction_algorithms: The epitope prediction algorithms to use. Multiple prediction algorithms can be specified, separated by spaces. Use all to run all available prediction algorithms. pVACseq will automatically determine which algorithms are valid for each HLA allele. output_dir: The directory for writing all result files. 3.3.2 Optional Parameters for pVACseq The pvacseq run command offers quite a few optional arguments to fine-tune your run. Here are a list of parameters we generally recommend: --phased-proximal-variants-vcf: This is an additional VCF file that includes both somatic and germline variants with phasing information. This file is used to identify variants near a somatic variant of interest and in-phase that would, as a result, change the predicted protein sequence around the somatic variant of interest and, thus, change the predicted neoantigens. Please note that pVACseq is currently only able to incorporate proximal missense variants so users should still manually investigate their candidates for other types of nearby variants (e.g. inframe and frameshift indels) --normal-sample-name: When using a tumor-normal input VCF, this parameter is used to identify the normal sample in the VCF in order to parse coverage metrics for the normal sample. --iedb-install-directory: For speed and reliability, we generally recommend that users use a standalone installation of the IEDB software. The pVACtools Docker containers already come with this software pre-installed in the /opt/iedb directory. --allele-specific-binding-thresholds: When filtering and tiering neoantigen candidates, one main criteria is the predicted peptide-MHC binding affinity. By default, pVACseq uses a cutoff of &lt;500 nmol IC50. However, for some HLA alleles, other cutoffs are more appropriate depending on the distribution of binding affinities across peptides. Setting this flag enables allele-specific binding cutoffs as recommended by IEDB. --allele-specific-anchors: When considering a neoantigen candidate, only a subset of peptide positions are presented to the T cell receptor for recognition, while others are responsible for anchoring to the MHC, making these positional considerations critical for predicting T cell responses. Conventionally, the 1st, 2nd, n-1 and n position in a neoantigen candidate were considered anchors while recent studies (Xia et al. 2023) have shown that these positions will depend on the HLA allele. Setting this flag will use allele-specific anchor locations where possible (we have predictions for ~300 common alleles). --run-reference-proteome-similarity: One consideration when selecting neoantigen candidates, is that the neoantigen should not occur natively in the patient’s proteome. When this flag is set, pVACseq will search for each neoantigen candidate in the reference proteome and report any hits found. By default this is done using BLASTp but we recommend using a proteome FASTA file via the --peptide-fasta parameter to speed up this step. This will trigger a much faster k-mer based search strategy. --pass-only: By default, all variants that were called in the tumor sample are considered by pVACseq. This flag will lead pVACseq to skip variants that have a FILTER applied in the VCF to, e.g., exclude variants that were marked as low quality by the variant caller. --percentile-threshold: When considering the peptide-MHC binding affinity for filtering and prioritizing neoantigen candidates, by default only the IC50 value is being used. Setting this parameter will additionally also filter on the predicted percentile. We recommend a value of 0.01 (1%) for this threshold. Additionally there are a number of parameters that might be useful depending on your specific analysis needs: --class-i-epitope-length and --class-ii-epitope-length: By default 8, 9, 10, 11 and 12, 13, 14, 15, 16, 17, 18 are set for these parameters, respectively, but different lengths might be desired. --tumor-purity: This parameter is used to bin variants into clonal and sub-clonal. This parameter might need to be adjusted based on the tumor purity of your data. --problematic-amino-acids: Some vaccine manufacturers will consider certain amino acids in the neoantigen candidates difficult to manufacture. For example, a Cysteine is commonly considered problematic as it makes the peptide unstable. This parameter allows users to set their own rules as to which peptides are considered problematic and peptides meeting those rules will be marked in the pVACseq results and deprioritized. --threads: This argument will allow pVACseq to run in multi-processing mode. --keep-tmp-files: Setting this flag will save intermediate files created by pVACseq. --downstream-sequence-length: For frameshift variants, the downstream sequence can potentially be very long, which can be computationally expensive. This parameter limits how many amino acids of the downstream sequence are included in the prediction. We often set a limit of 100. There are additional parameters in pVACseq that we won’t discuss at this point because the defaults are usually sufficient. To see all available parameters, you can run pvacseq run -h. 3.3.3 pVACseq Command Given the considerations outlined above, let’s run pVACseq on our sample data. From the optitype_normal_result.tsv we know that the patient’s class I alleles are HLA-A*29:02, HLA-B*45:01, HLA-B*82:02, and HLA-C*06:02 (indicated that two of three class I alleles are homozygous in this sample). We also have clinical typing information that confirms these class I alleles as well as identifying DQA1*03:03, DQB1*03:02, and DRB1*04:05 as the patient’s class II alleles. Note that where needed pVACseq will automatically create HLA class II dimer combinations using valid class II allele pairings. To identify the tumor and normal sample names we will grep the VCF file for the CHROM header: zgrep CHROM /HCC1395_inputs/annotated.expression.vcf.gz This shows that the tumor sample is named HCC1395_TUMOR_DNA and the normal sample is named HCC1395_NORMAL_DNA. For our test run, please execute the pvacseq run command below. The prediction run might take a while but pVACseq will output progress messages as it runs through the pipeline. pvacseq run \\ /HCC1395_inputs/annotated.expression.vcf.gz \\ HCC1395_TUMOR_DNA \\ HLA-A*29:02,HLA-B*45:01,HLA-B*82:02,HLA-C*06:02,DQA1*03:03,DQB1*03:02,DRB1*04:05 \\ all \\ /pVACtools_outputs/pvacseq_predictions \\ --normal-sample-name HCC1395_NORMAL_DNA \\ --phased-proximal-variants-vcf /HCC1395_inputs/phased.vcf.gz \\ --iedb-install-directory /opt/iedb \\ --pass-only \\ --allele-specific-binding-thresholds \\ --percentile-threshold 0.01 \\ --allele-specific-anchors \\ --run-reference-proteome-similarity \\ --peptide-fasta /HCC1395_inputs/Homo_sapiens.GRCh38.pep.all.fa.gz \\ --problematic-amino-acids C \\ --downstream-sequence-length 100 \\ --n-threads 8 \\ --keep-tmp-files 3.4 Running pVACfuse pVACfuse is run to in order to predict neoantigens from fusion events. The pipeline uses annotated fusion calls from either AGFusion or Arriba for this purpose. These annotators already include the fusion peptide sequence in their outputs which pVACfuse uses to extract neoantigens around the fusion position. The pVACfuse pipeline is run using the pvacfuse run command. 3.4.1 Required Parameters for pVACfuse The pvacfuse run command takes a number of required parameters in the following order: input_file: An AGFusion output directory or Arriba fusion.tsv output file. For the purpose of this course, we will be running pVACfuse with AGFusion output. sample_name: The name of the tumor sample being processed. allele(s): The name of the HLA allele to use for epitope prediction. Multiple alleles can be specified using a comma-separated list. These should be the HLA alleles of your patient. You might have clinical typing information for your patient. If not, you will need to computational predict the patient’s HLA type using software such as OptiType. prediction_algorithms: The epitope prediction algorithms to use. Multiple prediction algorithms can be specified, separated by spaces. Use all to run all available prediction algorithms. output_dir: The directory for writing all result files. 3.4.2 Optional Parameters for pVACfuse In addition to the required parameters, the pvacseq run command also offers optional arguments to fine-tune your run. You will find a lot of overlap between pVACfuse and pVACseq parameters and the same general considerations usually apply. Here are a list of parameters we generally recommend: --starfusion-file: Path to a star-fusion.fusion_predictions.tsv or star-fusion.fusion_predictions.abridged.tsv. This file is used to extract read support and expression information for each predicted fusion. --iedb-install-directory: For speed and reliability, we generally recommend that users use a standalone installation of the IEDB software. The pVACtools Docker containers already come with this software pre-installed in the /opt/iedb directory. --allele-specific-binding-thresholds: When filtering and tiering neoantigen candidates, one main criteria is the predicted peptide-MHC binding affinity. By default, pVACfuse uses a cutoff of &lt;500 nmol IC50. However, for some HLA alleles, other cutoffs are more appropriate depending on the distribution of binding affinities across peptides. Setting this flag enables allele-specific binding cutoffs as recommended by IEDB. --run-reference-proteome-similarity: One consideration when selecting neoantigen candidates, is that the neoantigen should not occur natively in the patient’s proteome. When this flag is set, pVACfuse will search for each neoantigen candidate in the reference proteome and report any hits found. By default this is done using BLASTp but we recommend using a proteome FASTA file via the --peptide-fasta parameter to speed up this step. --percentile-threshold: When considering the peptide-MHC binding affinity for filtering and prioritizing neoantigen candidates, by default only the IC50 value is being used. Setting this parameter will additionally also filter on the predicted percentile. We recommend a value of 0.01 (1%) for this threshold. Additionally there are a number of parameters that might be useful depending on your specific analysis needs: --class-i-epitope-length and --class-ii-epitope-length: By default 8, 9, 10, 11 and 12, 13, 14, 15, 16, 17, 18 are set for these parameters, respectively, but different lengths might be desired. --problematic-amino-acids: Some vaccine manufacturers will consider certain amino acids in the neoantigen candidates difficult to manufacture. For example, a Cysteine is commonly considered problematic as it makes the peptide unstable. This parameter allows users to set their own rules as to which peptides are considered problematic and peptides meeting those rules will be marked in the pVACseq results and deprioritized. --threads: This argument will allow pVACfuse to run in multi-processing mode. --keep-tmp-files: Setting this flag will save intermediate files created by pVACfuse. --downstream-sequence-length: For frameshift fusions, the downstream sequence can potentially be very long, which can be computationally expensive. This parameter limits how many amino acids of the downstream sequence are included in the prediction. We often set a limit of 100. 3.4.3 pVACfuse Command Given the considerations outlined above, let’s run pVACfuse on our sample data. As with pVACseq, we can use the optitype_normal_result.tsv file to identify the patient’s class I HLA alleles. These are HLA-A*29:02, HLA-B*45:01, HLA-B*82:02, and HLA-C*06:02. We also have clinical typing information that confirms these class I alleles as well as identified DQA1*03:03, DQB1*03:02, and DRB1*04:05 as the patient’s class II alleles. For pVACfuse the sample name is not used for any parsing so it doesn’t need to match any specific information in the AGFusion results. It is only used for naming result files. For consistency we will use the same HCC1395_TUMOR_DNA sample name we used in pVACfuse. For our test run, please execute the pvacfuse run command below. The prediction run might take a while but pVACfuse will output progress messages as it runs through the pipeline. pvacfuse run \\ /HCC1395_inputs/agfusion_results \\ HCC1395_TUMOR_DNA \\ HLA-A*29:02,HLA-B*45:01,HLA-B*82:02,HLA-C*06:02,DQA1*03:03,DQB1*03:02,DRB1*04:05 \\ all \\ /pVACtools_outputs/pvacfuse_predictions \\ --iedb-install-directory /opt/iedb \\ --allele-specific-binding-thresholds \\ --percentile-threshold 0.01 \\ --run-reference-proteome-similarity \\ --peptide-fasta /HCC1395_inputs/Homo_sapiens.GRCh38.pep.all.fa.gz \\ --problematic-amino-acids C \\ --downstream-sequence-length 100 \\ --n-threads 8 \\ --keep-tmp-files References "],["understanding-pvactools-outputs.html", "Chapter 4 Understanding pVACtools outputs 4.1 Learning Objectives 4.2 pVACtools Output Files 4.3 Interpreting the filtered.tsv File 4.4 Interpreting the aggregated.tsv File", " Chapter 4 Understanding pVACtools outputs 4.1 Learning Objectives This chapter will cover: Understanding the output files produced by pVACtools Interpreting the .filtered.tsv file Interpreting the .aggregated.tsv file 4.2 pVACtools Output Files Both pVACseq and pVACfuse produce three main output files: The all_epitopes.tsv file is a TSV file with all predicted neoantigens and all information obtained during the run. The filtered.tsv file is the same structure as the all_epitopes.tsv file but the entries have been filtered down according to the thresholds set by the user during the run. The filters will be further explained in subsequent sections. The aggregated.tsv is a condensed output file that contains only the information most pertinent to interpret the results. It has contains only the best neoantigen candidate for each variant. Our heuristic for determining the best neoantigen is described in subsequent sections of this course. There are also a number of a secondary output files produced by pVACseq and pVACfuse. The most important are: aggregated.metrics.json: The file is only produced by pVACseq. It contains metadata needed for visualizing your results in pVACview. aggregated.tsv.reference_matches: This file is created when the reference proteome match feature is enabled during a run. It contains detailed information about the reference matches found, if there are any. 4.3 Interpreting the filtered.tsv File The filtered.tsv file takes all the predicted neoantigens from the all_epitopes.tsv file and applies a number of filters to it. Filters are applied consecutively, meaning that only the entries passing the first filter will be passed along to the second filter, and so on. Only neoantigens passing all filters will be reported in this file. 4.3.1 Binding Filter The binding filter’s primary function is to filter neoantigen candidates on their IC50 binding affinity to an HLA allele. Because pVACtools allows users to run more than one prediction algorithm, we then apply two summarization methods on the calls for each neoantigen candidate and HLA allele combination: (1) pVACtools calculates the median IC50 binding affinity for all selected prediction algorithms (reported in the Median [MT] IC50 Score column), and (2) pVACtools selects the IC50 binding affinity prediction with the lowest value (reported in the Best [MT] IC50 Score) column. By default, the binding filter is applied to the median IC50 score unless users set the --top-score-metric parameters to lowest. The binding filter discards candidates where the binding affinity is above the --binding-threshold (default: 500). However, users may set the --allele-specific-binding-thresholds flag in order to use differing binding thresholds depending on the HLA allele of the prediction, as recommended by IEDB. Custom thresholds are available for the most common 76 class I HLA alleles. For all others, the --binding-threshold value is used. In addition to the binding affinity, other optional parameters can be set to enabled additional filtering on related metrics: --minimum-fold-change: The fold change is the ratio of the mutant binding affinity to the wild-type binding affinity, also called agretopicity. A fold change of 1 means that the mutant is a better binder than the wild type. pVACtools calculates this ratio for both the median as well as the lowest values. Which one is filtered on for this metric depends again on the --top-score-metric set. When a minimum fold change parameter is set, the binding filter discards any prediction with a agretopicity below the set cutoff. This parameter is not available in pVACfuse because there is no matched wildtype peptide for each neoantigen candidate. --percentile-threshold: The prediction algorithms supported by pVACtools also report a percentile score that represents where each neoantigen’s predicted affinity falls in the range of other values for an HLA allele. Similar to the binding affinity itself, pVACtools report the median and the lowest percentile scores for the range of scores reported by the prediction algorithms chosen by the user and which on is used for filtering is again controlled by the --top-score-metric parameter. 4.3.2 Coverage Filter The Coverage Filter is generally used to filter out variants that don’t have enough read support or expression. This ensures that the remaining variants are not just artifacts and that the genes are actually expressed in the patient’s RNA. For pVACseq, this generally relies on your VCF being annotated with coverage and expression data. In our example, the VCF has already been annotated with this data. For more information about how to add coverage and expression data to your own VCFs, please see our docs. Additionally, filtering on the normal DNA depth and variant allele frequency (VAF) requires your VCF to be a tumor-normal sample VCF and the normal sample to be identifies in your pVACseq run using the --normal-sample-name parameter. If a coverage metric doesn’t apply because the underlying data is not available, NA is reported by pVACtools. By default, the filter will skip evaluating a coverage criteria when a neoantigen’s value for it is NA. The following thresholds are applied in pVACseq by this filter: --normal-cov: Normal coverage cutoff. Minimum number of required reads in the normal DNA (default: 5). --tdna-cov: Tumor DNA coverage cutoff. Minimum number of required reads in the tumor DNA (default: 10). --trna-cov: Tumor RNA coverage cutoff. Minimum number of required reads in the tumor RNA (default: 10). --normal-vaf: Normal VAF cutoff. Only sites BELOW this cutoff in the normal DNA will be considered (default: 0.02). --tdna-vaf: Tumor DNA VAF cutoff. Only sites above this cutoff will be considered (default: 0.25). --trna-vaf: Tumor RNA VAF cutoff. Only sites above this cutoff will be considered (default: 0.25). --expn-val: Gene and Transcript expression cutoff. Only sites above this cutoff will be considered (default: 1.0). For pVACfuse, this filter evaluates a fusion variant’s fusion read support and fusion transcript expression. Arriba natively outputs a number of read metrics. These are the number of supporting split fragments with an anchor in gene1 or gene2, respectively, as well as the number of pairs (fragments) of discordant mates supporting the fusion (a.k.a. spanning reads or bridge reads). The sum of these three values is reported as Read Support in pVACfuse. The fusion transcript expression is parsed from the --starfusion-file, when provided. This is reported as FFPM (fusion fragments per million total reads). The following thresholds are applied in pVACfuse by this filter: --read-support: Read Support cutoff. Sites above this cutoff will be considered (default: 5). --expn-val: Expression cutoff. Sites above this cutoff will be considered (default: 0.1). 4.3.3 Transcript Support Level Filter The Transcript Support Level (TSL) Filter removes neoantigen candidates for transcripts with a high TSL, as defined by Ensembl. The cutoff for this filter is set by the --maximum-transcript-support-level parameter. Transcripts with a TSL of NA will always be filtered out. Annotation with TSL values through VEP is only available for GRCh38. For other species and older builds, a value of “Not Supported” is written to the report and the TSL filter will skip those variants. This filter is currently only run by pVACseq. 4.3.4 Top Score Filter The Top Score Filter will attempt to determine the best neoantigen candidate for each variants. For pVACseq it works as follows. Given a set of neoantigen candidates for a variant we first group the transcripts into sets where all transcripts in a set code for the same set of neoantigen candidates. For each transcript set we then determine the best neoantigen candidate as follows: Pick all neoantigens with a variant transcript that have a protein_coding Biotype Of the remaining candidates, pick the ones with a variant transcript having a TSL less then the --maximum-transcript-support-level. Of the remaining candidates, pick the entries with no Problematic Positions. Of the remaining candidates, pick the ones passing the Anchor Criteria (explained in more detail further below). Of the remaining candidates, pick the one with the lowest MT IC50 Score (Median or Best depending on the --top-score-metric), lowest TSL, and longest transcript. This filter then reports the best neoantigen candidate for each transcript set. For pVACfuse, the neoantigen candidate for each fusion are similarly grouped into sets where all transcript1-transcript2 combinations in a set code for the same set of neoantigen candidates. From there, the best neoantigen candidate for each transcript set is determined by picking the candidate with the lowest MT IC50 Score (Median or Best depending on the --top-score-metric) and the highest fusion transcript expression. 4.4 Interpreting the aggregated.tsv File The aggregated.tsv is a condensed output file that shows the best neoantigen candidate for each variant and reports only the information most pertinent to interpreting the results. It also assigns each of the selected neoantigen candidates a tier based on its suitability for vaccine manufacturing. Only epitopes meeting the --aggregate-inclusion-threshold are included in this report (default: 5000). Depending on the value used for the --top-score-metric, all neoantigen candidates with a Median or Best MT IC50 Score below the selected --aggregate-inclusion-threshold are included in creating this report. 4.4.1 Determining the Best Transcript and Best Peptide of a Variant In pVACseq, for each variant, all neoantigen candidates meeting the --aggregate-inclusion-threshold are evaluated as follows: Pick all entries with a variant transcript that have a protein_coding Biotype. Of the remaining entries, pick the ones with a variant transcript having a Transcript Support Level &lt;= --maximum-transcript-support-level. Of the remaining entries, pick the entries with no Problematic Positions. Of the remaining entries, pick the ones passing the Anchor Criteria (see Criteria Details section below). Of the remaining entries, pick the one with the lowest MT IC50 score( Median or Best depending on the --top-score-metric), lowest Transcript Support Level, and longest transcript. In pVACfuse, the neoantigen candidate with the lowest IC50 binding affinity for each variant is selected. The value used for the --top-score-metric determines whether the lowest or median binding affinity is used for this comparison. The chosen entry determines the best neoantigen candidate and the best transcript coding for it. 4.4.2 Tier and Tiering Criteria For the purpose of assigning tiers, each best peptide is evaluated by a set of criteria. These criteria and the available tiers differ from tool to tool. 4.4.2.1 Tiering in pVACseq The Tiers available in pVACseq are: Tier Criteria Pass Best Peptide passes the binding, expression, tsl, clonal, and anchor criteria Anchor Best Peptide fails the anchor criteria but passes the binding, expression, tsl, and clonal criteria Subclonal Best Peptide fails the clonal criteria but passes the binding, tsl, and anchor criteria LowExpr Best Peptide meets the Low Expression Criteria and passes the binding, tsl, clonal, and anchor criteria NoExpr Best Peptide is not expressed (RNA Expr == 0 or RNA VAF == 0) Poor Best Peptide doesn’t fit in any of the above tiers, usually if it fails two or more criteria or if it fails the binding criteria Criteria Details Criteria Description Evaluation Binding Criteria Pass if Best Peptide is a strong binder IC50 MT &lt; --binding-threshold and %ile MT &lt; --percentile-threshold (if parameter is set). --allele-specific-binding-thresholds flag is respected. Expression Criteria Pass if Best Transcript is expressed Allele Expr &gt; --trna-vaf * --expn-val Low Expression Criteria Peptide has low expression or no expression but RNA VAF and coverage (0 &lt; Allele Expr &lt; --trna-vaf * --expn-val) OR (RNA Expr == 0 AND RNA Depth &gt; --trna-cov AND RNA VAF &gt; --trna-vaf) TSL Criteria Pass if Best Transcript has good transcript support level TSL &lt;= --maximum-transcript-support-level Clonal Criteria Best Peptide is likely in the founding clone of the tumor DNA VAF &gt; --tumor-purity / 4 Anchor Criteria Fail if all mutated amino acids of the Best Peptide (Pos) are at an anchor position and the WT peptide has good binding (IC50 WT &lt; --binding-threshold). --allele-specific-binding-thresholds flag is respected. 4.4.2.2 Tiering in pVACfuse The Tiers available in pVACfuse are: Tier Criteria Pass Best Peptide passes the binding, read support, and expression criteria LowReadSupport Best Peptide fails the read support criteria but passes the binding and expression criteria LowExpr Best Peptide fails the expression criteria but passes the binding and read support criteria Poor Best Peptide doesn’t fit any of the above tiers, usually if it fails two or more criteria or if it fails the binding criteria Criteria Details Criteria Description Evaluation Binding Criteria Pass if Best Peptide is strong binder IC50 MT &lt; --binding-threshold and %ile MT &lt; --percentile-threshold (if parameter is set). --allele-specific-binding-thresholds flag is respected. Read Support Criteria Pass if the variant has read support Read Support &lt; --read-support Expression Criteria Pass if Best Transcript is expressed Expr &lt; --expn-val "],["review-your-results-in-pvacview.html", "Chapter 5 Review Your Results in pVACview 5.1 Learning Objectives 5.2 Introduction to the pVACview module 5.3 Starting pVACview 5.4 Uploading pVACseq result data into pVACview 5.5 The pVACview User Interface 5.6 Regenerate Tiers with Custom Parameters 5.7 Adding Comments to Variants 5.8 Exporting the Aggregated Table", " Chapter 5 Review Your Results in pVACview 5.1 Learning Objectives This chapter will cover: Introduction to the pVACview module How to start pVACview How to load your pVACseq data into pVACview The pVACview user interface How to re-tier results in pVACview How to add comments to the variants in the report How to export the reviewed results 5.2 Introduction to the pVACview module pVACview is a R shiny based tool designed to aid specifically in the prioritization and selection of neoantigen candidates for personalized cancer vaccines or other applications. It takes as inputs a pVACseq output aggregate report file (tsv format) and a corresponding pVACseq output metrics file (json). pVACview allows the user to launch an R shiny application to load and visualize the given neoantigen candidates with detailed information including that of the genomic variant, transcripts covering the variant, and strong-binding peptides predicted from the respective transcripts. It also incorporates anchor prediction data for a range of class I HLA alleles and peptides ranging from 8- to 11-mers. By taking all these types of information into account for the neoantigen candidates, researchers will be able to make more informed decisions when deciding final peptide candidates for experiments, personalized cancer vaccines, or T cell therapies designed to target neoantigens. 5.3 Starting pVACview The pVACview R source code is distributed with every pVACseq run the in MHC_Class_I and/or MHC_Class_II subdirectories, depending on which prediction algorithms were run. For the HCC1395 pVACseq example run you did earlier, it can be started by running the following command in your Terminal: pvacview run ${PWD}/pVACtools_outputs/MHC_Class_I This starts a process for the pVACview R shiny application. Do not close the terminal window or end this process. You can now open pVACview in your browser by navigating to http://127.0.0.1:3333/. 5.4 Uploading pVACseq result data into pVACview The starting screen shows an upload form. You will want to upload the Class I aggregated.tsv report under “1. Neoantigen Candidate Aggregate Report (tsv required)”. We generally recommend using Class I as the main report, as these are more robust than Class II. However, either can be uploaded here as long as the correct data type is selected under “Does this aggregate report file correspond to Class I or Class II prediction data?” Upload the matching Class I metrics.json file under “2. Neoantigen Candidate Metrics file (json required)”. The Class II aggregated.tsv can now be uploaded as a supplementary file under “3. Additional Neoantigen Candidate Aggregate Report (tsv required)”. This interface also optionally allows users to upload a gene-of-interest TSV file to, e.g. highlight variants on known cancer genes. We have provided such a TSV with your original HCC1395 downloaded data, called “cancer_census_hotspot_gene_list.tsv”. After uploading all files, you can visualize the result by clicking on the “Visualize” button at the bottom of the page, or the “Visualize and Explore” tab in the sidebar. 5.5 The pVACview User Interface 5.5.1 Aggregate Report of Best Candidates by Variant The main table in the Aggregate Report of Best Candidates by Variant panel shows the best neoantigen candidate for each variant. It lists the gene and amino acid change of the variant as well as additional information about the best peptide and the best transcript coding for it. These include, from left to right, the transcript support level, the best-binding HLA allele, the mutated positions of the best peptide, any positions in the peptide where the amino acid might be problematic for manufacturing, and the total number of neoantigen candidates passing the binding affinity threshold set by the user. If a gene of interest list was uploaded, variants on those genes have their gene highlighted with a green border. Next, this table lists the IC50 peptide MHC binding affinity for both the mutant and the wild type. It also shows the percentile scores of the binding affinity values. For the mutant values, a heatmap coloring is applied to make it easier to visually identify well-binding peptides. The next few columns show the coverage and expression of the best transcript with a bar plot background to represent where specific values fall across the entire patient sample. The Tier column represents the tier assigned to the best peptide. The neoantigen candidates in this view were all sorted into the Pass tier but tiers such as Low Expression or Subclonal are applied to easily identify why a neoantigen candidate might be unsuitable for vaccine selection. The Ref Match column reflects whether or not the best peptide was found in the reference proteome which is undesired since such peptides are not novel and including them in a vaccine might lead to an auto immune response. Users are able to set a status for each candidate in the Evaluation column to mark them as Accept, Reject, or requiring further review. The Investigate button can be clicked to see more detail for a variant. This will update the lower panels with details for the selected variant. For candidates not sorted into the Pass tier, red borders visually highlight the attributes failed by the candidate. 5.5.2 Variant Information The Variant Information panel shows more variant-level details of the selected neoantigen candidate. On the left is a three-tab section. The first tab, “Transcript Sets of Selected Variant”, shows a list of transcript sets. pVACtools bins transcripts that code for the same set of neoantigen candidates into a set because the neoantigen-level information for all transcripts in a set will be identical. The transcript set containing the Best Peptide is highlighted in green. This table shows the number of transcripts in each set, the number of well-binding peptides the transcripts in the set code for, and the total expression of all the transcripts in the set. The second tab, titled Reference Matches, shows the details for any reference matches of the neoantigen candidate. It repeats information about the Best Peptide sequence, the amino acid change, the mutated position, and the gene for easy reference. The mutated positions are notated in red in the Best Peptide sequence and the Query Sequence. The Query Sequence is a longer sequence around the somatic mutation. The Best Peptide subsequence is highlighted in yellow in the Query Sequence. For any 8mer subsequence of the query sequence, pVACtools looks for matches in the reference proteome. Any matches found are reported in the Hits table The “Additional Data” tab shows the additional data for the variant if a Additional Neoantigen Candidate Aggregate Report was uploaded. It shows the Best Peptide and its information for this variant from the additional report. This can be used, e.g., when a Class I neoantigen candidate is a bad binder but all other metrics look good. Oftentimes this variant can be rescued by considering the best Class II neoantigen candidate instead. The next section, “Variant &amp; Gene Info”, shows coverage and expression information as well as the genomic coordinates for the variant. The last section, “Peptide Evaluation Overview”, shows counts for how many peptides have been accepted, rejected, or marked for review. For most vaccines a certain minimum number of neoantigen candidates is desired so this panel makes it easy to review how many neoantigen candidates are still needed. 5.5.3 Transcript Set Detailed Data When selecting a transcript set in the Variant Info panel, this panel will show details about the neoantigen candidates the transcripts in the set code for and as well as details on the transcripts themselves. The Peptide Candidates from Selected Transcript Set tab shows a list of mutant and matched wildtype peptides and their IC50 binding affinity to the patient HLA alleles. Only neoantigen candidates where at least one peptide-MHC binding prediction falls within the --aggregate-inclusion-threshold will be shown in this table. For HLA alleles where the peptide is not well-binding the prediction details will show X. This table also shows the mutant position, whether or not the neoantigen candidate has any problematic positions, and whether or not it failed the anchor criteria. This helps in determining whether a neoantigen candidate was deprioritized when selecting the Best Peptide. The Best Peptide is highlighted in green. The Transcripts in Set tabs shows details of the transcripts in the selected set such as the transcript Ensembl ID, the transcript expression, the transcript support level, the biotype, and the transcript length. This reflects the criteria used in determining the Best Transcript. The Best Transcript is highlighted in green. 5.5.4 Additional Peptide Information In the Additional Peptide Information panel, users can see more information for the neoantigen candidate selected in the Transcript Set Detailed Data panel. The first tab, “IC50 Plot”, shows violin plots of the predicted IC50 binding affinity for each prediction algorithm for both the neoantigen candidate and its matched wildtype peptide. This can be used to check concordance of predictions between the different algorithms. It also allows for a detailed comparison between the mutant and wildtype predictions in addition to the median or lowest IC50 binding affinity used elsewhere. A solid line is used to represent the median score. The %ile Plot tab shows a similar violin plot but for the predicted percentile scores as opposed to the IC50 binding affinity. A solid line is also used here to represent the median score. The next tab, “Binding Data”, shows the IC50 binding affinity and percentile score but in table format. The Elution Table tab shows the predicted elution scores and percentiles, if the appropriate prediction algorithm(s) were chosen. Lastly, the Anchor Heatmap tab shows a heatmap overlayed over each neoantigen candidate from the selected transcript set. A darker color represents a higher probability that a position in the peptide is an anchor. Mutated positions are represented by red letters. More information about how to interpret the heatmap can be found in the graph on the right of this panel. 5.6 Regenerate Tiers with Custom Parameters During review of your data it might become apparent that different tiering thresholds would’ve been more approriate. pVACview allows you to re-tier your data with custom parameters by adjusting the sliders and inputs in the “Advanced Options: Regenerate Tiering with different parameters” panel and pressing the “Recalculate Tiering with new parameters” button. The parameters that were used in the original pVACseq run can still be viewed in the “Original Parameters for Tiering” panel and the tiers can be reset to those parameters by pressing the “Reset to original parameters” button. 5.7 Adding Comments to Variants When reviewing neoantigen candidates in pVACseq, users are able to add comments on each variant, for example, describing what additional review is necessary. Please note that comments are not saved until the “Update Comment Section” button is pressed. 5.8 Exporting the Aggregated Table Once review of the neoantigen candidates has been completed, the results can be exported by switching to the Export interface via the sidebar. This will export the Aggregated Report with the updated Evaluation column and comments added. The report can be exported in either TSV or Excel format. "],["conclusions.html", "Chapter 6 Conclusions 6.1 Learning Objectives 6.2 Key conclusions 6.3 Additional Resources", " Chapter 6 Conclusions 6.1 Learning Objectives This chapter will summarize: Key conclusions of the course Additional learning resources 6.2 Key conclusions In this course you will have gained a better understanding of the current best practices for neoantigen indentification and prioritization. You will have learned how to run pVACtools, interpret pVACtools results, and select neoantigen candidates suitable for vaccine manufacturing using pVACview. 6.3 Additional Resources pVACtools documentation Email help alias Report an issue with pVACtools Report an issue with this course "],["about-the-authors.html", "About the Authors", " About the Authors These credits are based on course contributors guidelines described here.     Credits Names Pedagogy Lead Content Instructor(s) Malachi Griffith, Obi Griffith Lecturer(s) Malachi Griffith, Susanna Kiwala Content Author(s) Susanna Kiwala Content Contributor(s) Huiming Xia Content Editor(s)/Reviewer(s) Malachi Griffith Content Director(s) Content Consultants Acknowledgments Production Content Publisher(s) Content Publishing Reviewer(s) Technical Course Publishing Engineer(s) Template Publishing Engineers Candace Savonen, Carrie Wright, Ava Hoffman Publishing Maintenance Engineer Candace Savonen Technical Publishing Stylists Carrie Wright, Ava Hoffman, Candace Savonen Package Developers (ottrpal) Candace Savonen, John Muschelli, Carrie Wright Art and Design Illustrator(s) Josh McMichael Figure Artist(s) Josh McMichael Videographer(s) Huiming Xia Videography Editor(s) Audiographer(s) Audiography Editor(s) Funding Funder(s) Institution/individual who funded course including grant number Funding Staff National Cancer Institute (NCI) U01CA248235 "],["references.html", "Chapter 7 References", " Chapter 7 References "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
